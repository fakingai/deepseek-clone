default_platform(:ios)

platform :ios do
  desc "Build Flutter app and deploy to TestFlight"
  lane :deploy_testflight do
    # Ensure Flutter dependencies are up to date (run from root)
    sh("cd ../../ && flutter pub get")

    # Run build_runner if applicable (run from root)
    sh("cd ../../ && dart run build_runner build -d -v")

    # Build the IPA using gym.
    # It assumes ExportOptions_generated.plist is created by the CI workflow in the ios/ directory.
    # It also assumes the keychain and provisioning profiles are set up by the CI workflow.
    gym(
      scheme: "Runner", # Default Flutter scheme
      export_method: "app-store", # Should match the method in ExportOptions.plist
      export_options: "../ExportOptions_generated.plist", # Path relative to this Fastfile (ios directory)
      output_directory: "../../build/ios/ipa",  # Output path relative to this Fastfile
      output_name: "DeepSeek-iOS.ipa",    # Consistent artifact name
      clean: true,
      # If signing is perfectly handled by ExportOptions.plist and keychain setup:
      # You might not need specific code_sign_identity or provisioning_profile_path here.
      # gym will use what's available and configured.
      # Ensure your ExportOptions.plist correctly specifies the signingStyle (manual)
      # and the provisioningProfiles map with the UUID.
    )

    # Upload to TestFlight using pilot.
    # pilot uses App Store Connect API Key environment variables set in the GitHub workflow.
    pilot(
      ipa: "../../build/ios/ipa/DeepSeek-iOS.ipa", # Path to the generated IPA
      # app_identifier: ENV["IOS_BUNDLE_ID_VAR"], # Usually inferred, but can be set via ENV
      # team_id: ENV["APPLE_TEAM_ID_VAR"],        # Usually inferred, but can be set via ENV
      skip_waiting_for_build_processing: true, # Optional: Don't wait for Apple to process the build
      distribute_external: false # Set to true if you want to distribute to external testers immediately
    )

    UI.success("Successfully built and uploaded to TestFlight via Fastlane!")
  end
end
